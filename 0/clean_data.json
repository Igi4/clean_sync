{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Map","id":"Map","comment":"\nAn unordered collection of key-value pairs, from which you retrieve a value\nby using its associated key.\n\nEach key can occur at most once in a map.\n\nIt is generally not allowed to modify the map (add or remove keys) while\nan operation is being performed on the map, for example in functions called\nduring a [forEach] or [putIfAbsent] call.\nModifying the map while iterating the keys or values will also most likely\nbreak the iteration.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsValue","id":"containsValue1()","comment":"\nReturns true if this map contains the given value.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"92"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsKey","id":"containsKey1()","comment":"\nReturns true if this map contains the given key.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"97"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the value for the given [key] or null if [key] is not\nin the map. Because null values are supported, one should either\nuse [containsKey] to distinguish between an absent key and a null\nvalue, or use the [putIfAbsent] method.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"105"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\nAssociates the [key] with the given [value].\n","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"V","refId":"dart.core/Map/V"},"kind":"param","name":"value","id":"value"}],"line":"110"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"method","name":"putIfAbsent","id":"putIfAbsent2()","comment":"\nIf [key] is not associated to a value, calls [ifAbsent] and\nupdates the map by mapping [key] to the value returned by\n[ifAbsent]. Returns the value in the map.\n\n    Map<String, int> scores = {'Bob': 36};\n    for (var key in ['Bob', 'Rohan', 'Sophena']) {\n      scores.putIfAbsent(key, () => key.length);\n    }\n    scores['Bob'];      // 36\n    scores['Rohan'];    //  5\n    scores['Sophena'];  //  7\n\nThe code that [ifAbsent] executes must not add or remove keys.\n","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"ifAbsent","id":"ifAbsent","children":[{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"127"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAdds all key-value pairs of [other] to this map.\n\nIf a key of [other] is already in this map, its value is overwritten.\n\nThe operation is equivalent to doing `this[key] = value` for each key\nand associated value in other. It iterates over [other], which must\ntherefore not change during the iteration.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"param","name":"other","id":"other"}],"line":"138"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the association for the given [key]. Returns the value for\n[key] in the map or null if [key] is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"146"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all pairs from the map.\n","line":"151"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies [f] to each {key, value} pair of the map.\n\nIt is an error to add or remove keys from the map during iteration.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/core/map.dart","line":"158"},{"ref":{"name":"V","refId":"dart.core/Map/V"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/map.dart","line":"158"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"158"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.core/Map/K"}]},"kind":"property","name":"keys","id":"keys","comment":"\nThe keys of [this].\n\nThe returned iterable has efficient `length` and `contains` operations,\nbased on [length] and [containsKey] of the map.\n","line":"166"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.core/Map/V"}]},"kind":"property","name":"values","id":"values","comment":"\nThe values of [this].\n\nThe returned iterable has an efficient `length` method based on the\n[length] of the map.\n","line":"174"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nThe number of key-value pairs in the map.\n","line":"179"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no key-value pair in the map.\n","line":"184"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one key-value pair in the map.\n","line":"189"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"","id":"0()","comment":"\nCreates a Map instance with the default implementation.\n","line":"23"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates a Map instance that contains all key-value pairs of [other].\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"param","name":"other","id":"other"}],"line":"28"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"identity","id":"identity0()","comment":"\nCreates an identity map with the default implementation.\n","line":"33"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"fromIterable","id":"fromIterable3()","comment":"\nCreates a Map instance in which the keys and values are computed from the\n[iterable].\n\nFor each element of the [iterable] this constructor computes a key-value\npair, by applying [key] and [value] respectively.\n\nThe example below creates a new Map from a List. The keys of `map` are\n`list` values converted to strings, and the values of the `map` are the\nsquares of the `list` values:\n\n    List<int> list = [1, 2, 3];\n    Map<String, int> map = new Map.fromIterable(list,\n        key: (item) => item.toString(),\n        value: (item) => item * item));\n\n    map['1'] + map['2']; // 1 + 4\n    map['3'] - map['2']; // 9 - 4\n\nIf no values are specified for [key] and [value] the default is the\nidentity function.\n\nIn the following example, the keys and corresponding values of `map`\nare `list` values:\n\n    map = new Map.fromIterable(list);\n    map[1] + map[2]; // 1 + 2\n    map[3] - map[2]; // 3 - 2\n\nThe keys computed by the source [iterable] do not need to be unique. The\nlast occurrence of a key will simply overwrite any previous value.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"key","id":"key","children":[{"returnType":{"name":"K","refId":"dart.core/Map/K"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/map.dart","line":"68"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"68"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"value","id":"value","children":[{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/map.dart","line":"68"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"68"}],"line":"67"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"fromIterables","id":"fromIterables2()","comment":"\nCreates a Map instance associating the given [keys] to [values].\n\nThis constructor iterates over [keys] and [values] and maps each element of\n[keys] to the corresponding element of [values].\n\n    List<String> letters = ['b', 'c'];\n    List<String> words = ['bad', 'cat'];\n    Map<String, String> map = new Map.fromIterables(letters, words);\n    map['b'] + map['c'];  // badcat\n\nIf [keys] contains the same object multiple times, the last occurrence\noverwrites the previous value.\n\nIt is an error if the two [Iterable]s don't have the same length.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.core/Map/K"}]},"kind":"param","name":"keys","id":"keys"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.core/Map/V"}]},"kind":"param","name":"values","id":"values"}],"line":"86"},{"kind":"typeparam","name":"K","id":"K"},{"kind":"typeparam","name":"V","id":"V"}],"uri":"dart-sdk/lib/core/map.dart","line":"19"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterable","id":"Iterable","comment":"\nAn object that uses an [Iterator] to serve objects one at a time.\n\nYou can iterate over all objects served by an Iterable object\nusing the for-in loop construct.\nFor example, you can iterate over all of the keys in a [Map],\nbecause Map keys are iterable.\n\n    Map kidsBooks = {'Matilda': 'Roald Dahl',\n                     'Green Eggs and Ham': 'Dr Seuss',\n                     'Where the Wild Things Are': 'Maurice Sendak'};\n    for (var book in kidsBooks.keys) {\n      print('$book was written by ${kidsBooks[book]}');\n    }\n\nThe [List] class and the [Set] class implement this interface,\nas do classes in the [dart:collection](#dart-collection) library.\n\nYou can implement Iterable in your own class.\nIf you do, then an instance of your Iterable class\ncan be the right-hand side of a for-in construct.\n\nSome subclasss of `Iterable` can be modified. It is generally not allowed\nto modify such collections while they are being iterated. Doing so will break\nthe iteration, which is typically signalled by throwing a\n[ConcurrentModificationError] when it is detected.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"66"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"66"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"where","id":"where1()","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"78"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"78"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","comment":"\nExpands each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable runs through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and calls [f] for each element\nof this every time it's iterated.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"89"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"89"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if the collection contains an element equal to [element].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"94"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies the function [f] to each element of this collection.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"99"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"99"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"110"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"kind":"method","name":"fold","id":"fold2()","comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/core/iterable.dart","line":"126"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"126"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"126"}],"line":"125"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"132"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"132"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"141"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"151"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"151"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toList","id":"toList1()","comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements are in iteration order. The list is fixed-length\nif [growable] is false.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"159"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","line":"164"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"take","id":"take1()","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"192"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nReturns an Iterable that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it does not\nget or provide any more elements.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"204"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"204"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nReturns an Iterable that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting Iterable is\nempty.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"214"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nReturns an Iterable that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"228"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"228"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"259"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"259"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"268"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"268"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"274"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"274"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"285"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"property","name":"iterator","id":"iterator","comment":"\nReturns an Iterator that iterates over this Iterable object.\n","line":"54"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"172"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no element in this collection.\n","line":"177"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one element in this collection.\n","line":"182"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"236"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","line":"243"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","line":"250"},{"kind":"constructor","name":"","id":"0()","line":"35"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"constructor","name":"generate","id":"generate2()","comment":"\nCreates an Iterable that generates its elements dynamically.\n\nThe Iterators created by the Iterable count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an Iterable, [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/iterable.dart","line":"47"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"47"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterable.dart","line":"34"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"isThrowable":true,"kind":"class","name":"Exception","id":"Exception","comment":"\nA marker interface implemented by all core library exceptions.\n\nAn [Exception] is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.\n\nCreating instances of [Exception] directly with [:new Exception(\"message\"):]\nis discouraged, and only included as a temporary measure during development,\nuntil the actual exceptions used by a library are done.\n","children":[{"returnType":{"name":"Exception","refId":"dart.core/Exception"},"kind":"constructor","name":"","id":"1()","children":[{"isOptional":true,"kind":"param","name":"message","id":"message"}],"line":"21"}],"uri":"dart-sdk/lib/core/exceptions.dart","line":"20"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"dart:collection","id":"dart.collection","comment":"\nClasses and utilities that supplement the collection support in dart:core.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]}],"kind":"class","name":"IterableMixin","id":"IterableMixin","comment":"\nThis [Iterable] mixin implements all [Iterable] members except `iterator`.\n\nAll other methods are implemented in terms of `iterator`.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart"}],"uri":"dart-sdk/lib/core/function.dart"}]}],"line":"13"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"15"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"15"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"17"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"17"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"20"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"27"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"27"},{"returnType":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"31"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"31"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"31"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/iterable.dart","line":"44"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"44"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"44"}],"line":"43"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"50"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"50"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"57"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"75"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"75"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"82"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"85"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"101"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"105"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"105"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"109"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"113"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"113"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"145"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"145"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"153"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"153"},{"returnType":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"167"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"167"},{"returnType":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"183"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"193"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"87"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"97"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"99"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"property","name":"first","id":"first","line":"117"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"property","name":"last","id":"last","line":"125"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"property","name":"single","id":"single","line":"137"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/iterable.dart","line":"12"}],"uri":"dart-sdk/lib/collection/collection.dart","line":"8"}],"kind":"library","name":"package:clean_data/clean_data.dart","id":"clean_data","comment":"\nSupport for automatical data synchronization among collections.\n\n## Concepts\n\n* __Changes__: You can easily attach listeners to all objects to detect\n  changes of their data. Changes are represented as [ChangeSet] or [Change]\n  instances. Changes are available through asynchronous [onChange] [Stream],\n  that does the work of grouping multiple changes that occured during\n  execution to single [ChangeSet] fired in the next event loop.\n\n* __Data__: Data are stored using a [Map] compatible instances of class\n  [Data].\n\n* __Collection__: Multiple data objects can be stored and manipulated using\n  the instance of [DataCollection] class. [DataCollection] behave similarly\n  to [Set], each object can be contained at most once and no order is\n  guaranteed.\n\n* __Views__: You can easily create various read-only views of your data\n  using handy methods [filter], [map], [union], [except], [intersect]. Views\n  gets automatically updated when the underlying data change to always\n  reflect actual state.\n\n## Examples\n\nCreate simple data object and listen to its changes:\n\n    import 'package:clean_data/clean_data.dart';\n    void main() {\n      var person = new Data.from({\"name\": \"John\"});\n      person.onChange.listen((changeSet) => print(\"Person has changed!\"));\n\n      person['surname'] = 'Doe';\n      person['age'] = 37;\n    }\n\nThe above code outputs:\n\n    Person has changed!\n\nNotice that despite of two changes happened, we only one notification was\nfired.\n\nCreate simple collection and listen to its changes:\n\n    import 'package:clean_data/clean_data.dar';\n    void main() {\n      var colleagues = new DataCollection();\n      colleagues.onChange.listen((changeSet) => print(\"Team has changed!\"));\n\n      colleagues.add(new Data.from({\"name\": \"John\"}));\n      colleagues.add(new Data.from({\"name\": \"Peter\"}));\n\n    }\n\nThe above code outputs:\n\n    Team has changed!\n\nSimilarly to previous example, only one notification was fired.\n\nOur collection also listens to changes in its underlying data objects:\n\n    import 'package:clean_data/clean_data.dar';\n    void main() {\n      var john = new Data.from({\"name\": \"John\"});\n      var peter = new Data.from({\"name\": \"Peter\"});\n\n      var colleagues = new DataCollection.from([john, peter]);\n      colleagues.onChange.listen((changeSet) => print(\"Team has changed!\"));\n\n      john['surname'] = 'Doe';\n      peter['surname'] = 'Pan';\n\n    }\n\nThe above code outputs:\n\n    Team has changed!\n\nAgain, only one notification was fired.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"HashIndex","id":"HashIndex","comment":"\nReally simple inverted index implementation.\n","children":[{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"clean_data/HashIndex/E"}]},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns a set of objects that have this value. If no such\nobject exists, empty Set is returned.\n","children":[{"kind":"param","name":"value","id":"value"}],"line":"31"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add2()","comment":"\nAdds a [value] to [object] mapping to the index.\n","children":[{"kind":"param","name":"value","id":"value"},{"ref":{"name":"E","refId":"clean_data/HashIndex/E"},"kind":"param","name":"object","id":"object"}],"line":"38"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"remove","id":"remove2()","comment":"\nRemoves a [value] to [object] mapping from the index.\n","children":[{"kind":"param","name":"value","id":"value"},{"ref":{"name":"E","refId":"clean_data/HashIndex/E"},"kind":"param","name":"object","id":"object"}],"line":"49"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"clean_data/HashIndex/E"}]}]},"kind":"variable","name":"_index","id":"_index","comment":"\nHolds the mapping of values to data objects.\n","isPrivate":true,"line":"25"},{"kind":"constructor","name":"","id":"0()","line":"20"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"package:clean_data/src/hash_index.dart","line":"19"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"isThrowable":true,"kind":"class","name":"NoIndexException","id":"NoIndexException","comment":"\nRepresents an exception that is raised when an unindexed object is\nattempted to be treated as an object.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"cause","id":"cause","line":"12"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"cause","refId":"clean_data/NoIndexException/cause"},"kind":"param","name":"cause","id":"cause"}],"line":"13"}],"uri":"package:clean_data/src/hash_index.dart","line":"11"},{"superclass":{"name":"TransformedDataCollection+DataChangeListenersMixin","refId":"clean_data/TransformedDataCollection+DataChangeListenersMixin"},"kind":"class","name":"MappedCollectionView","id":"MappedCollectionView","comment":"\nRepresents a read-only data collection that is a result of a mapping operation on another collection.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addMapped","id":"_addMapped1()","comment":"\nAdds a mapped data object and starts listening to changes on it.\n","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"98"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatAddedItem","id":"_treatAddedItem2()","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"d","id":"d"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"107"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatRemovedItem","id":"_treatRemovedItem2()","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"109"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","line":"123"},{"isFinal":true,"kind":"variable","name":"_mapping","id":"_mapping","isPrivate":true,"line":"83"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a new data collection from [source] where each element e from [source]\nis replaced by the result of mapping(e).\n","children":[{"ref":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"DataTransformFunction","refId":"clean_data/DataTransformFunction"},"initializedField":{"name":"_mapping","refId":"clean_data/MappedCollectionView/_mapping"},"kind":"param","name":"_mapping","id":"_mapping","isPrivate":true}],"line":"89"}],"uri":"package:clean_data/src/collections/mapped_collection_view.dart","line":"81"},{"superclass":{"name":"DataView","refId":"clean_data/DataView"},"kind":"class","name":"MappedDataView","id":"MappedDataView","comment":"\nDataView\nListens to changes on [source] and transforms ([_remap]) itself correspondingly.\nClients could listen to its changes.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_remap","id":"_remap0()","comment":"\nRe-applies the mapping transformation on this data object.\nTODO: Rewrite to work with synced.\n","isPrivate":true,"line":"37"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","line":"68"},{"ref":{"name":"DataView","refId":"clean_data/DataView"},"isFinal":true,"kind":"variable","name":"source","id":"source","comment":"\nSource [DataView] object this object is derived from.\n","line":"17"},{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"},"kind":"variable","name":"_sourceSubscription","id":"_sourceSubscription","isPrivate":true,"line":"18"},{"ref":{"name":"DataTransformFunction","refId":"clean_data/DataTransformFunction"},"isFinal":true,"kind":"variable","name":"_mapping","id":"_mapping","comment":"\nMapping function that maps a [DataView] to another [DataView]\n","isPrivate":true,"line":"23"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"initializedField":{"name":"source","refId":"clean_data/MappedDataView/source"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"DataTransformFunction","refId":"clean_data/DataTransformFunction"},"initializedField":{"name":"_mapping","refId":"clean_data/MappedDataView/_mapping"},"kind":"param","name":"_mapping","id":"_mapping","isPrivate":true}],"line":"25"}],"uri":"package:clean_data/src/collections/mapped_collection_view.dart","line":"12"},{"superclass":{"name":"FilteredCollectionBase","refId":"clean_data/FilteredCollectionBase"},"kind":"class","name":"UnionedCollectionView","id":"UnionedCollectionView","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_shouldContain","id":"_shouldContain1()","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"105"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a new data collection from [source1] and [source2] with elements\nthat appear in at least one of the collections.\n","children":[{"ref":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"param","name":"source1","id":"source1"},{"ref":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"param","name":"source2","id":"source2","line":"103"}],"line":"102"}],"uri":"package:clean_data/src/collections/filtered_collection_view.dart","line":"97"},{"superclass":{"name":"FilteredCollectionBase","refId":"clean_data/FilteredCollectionBase"},"kind":"class","name":"IntersectedCollectionView","id":"IntersectedCollectionView","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_shouldContain","id":"_shouldContain1()","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"93"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a new data collection from [source1] and [source2] only with\nelements that appear in both collections.\n","children":[{"ref":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"param","name":"source1","id":"source1"},{"ref":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"param","name":"source2","id":"source2","line":"91"}],"line":"90"}],"uri":"package:clean_data/src/collections/filtered_collection_view.dart","line":"85"},{"superclass":{"name":"FilteredCollectionBase","refId":"clean_data/FilteredCollectionBase"},"kind":"class","name":"ExceptedCollectionView","id":"ExceptedCollectionView","comment":"\nRepresents a read-only data collection that is a result of an minus operation of two collections.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_shouldContain","id":"_shouldContain1()","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"79"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a new data collection from [source1] and [source2] only with elements that appear in A but not B.\n","children":[{"ref":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"param","name":"source1","id":"source1"},{"ref":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"param","name":"source2","id":"source2","line":"77"}],"line":"76"}],"uri":"package:clean_data/src/collections/filtered_collection_view.dart","line":"71"},{"superclass":{"name":"FilteredCollectionBase","refId":"clean_data/FilteredCollectionBase"},"kind":"class","name":"FilteredCollectionView","id":"FilteredCollectionView","comment":"\nRepresents a read-only data collection that is a result of a filtering\noperation on another collection.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_shouldContain","id":"_shouldContain1()","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"64"},{"isFinal":true,"kind":"variable","name":"_filter","id":"_filter","isPrivate":true,"line":"56"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a new filtered data collection from [source], using [filter].\n","children":[{"ref":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"DataTestFunction","refId":"clean_data/DataTestFunction"},"initializedField":{"name":"_filter","refId":"clean_data/FilteredCollectionView/_filter"},"kind":"param","name":"_filter","id":"_filter","isPrivate":true,"line":"62"}],"line":"61"}],"uri":"package:clean_data/src/collections/filtered_collection_view.dart","line":"54"},{"superclass":{"name":"TransformedDataCollection","refId":"clean_data/TransformedDataCollection"},"isAbstract":true,"kind":"class","name":"FilteredCollectionBase","id":"FilteredCollectionBase","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_shouldContain","id":"_shouldContain1()","comment":"\nReturns true if [dataObj] should be present in the collection.\n","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"23"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatItem","id":"_treatItem2()","comment":"\nDecides whether a [dataObj] that has changed in the [source] collection\nshould be added/changed/removed in this filtered collection.\n","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"param","name":"changes","id":"changes"}],"isPrivate":true,"line":"29"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"}]},"kind":"param","name":"sources","id":"sources"}],"line":"9"}],"uri":"package:clean_data/src/collections/filtered_collection_view.dart","line":"7"},{"superclass":{"name":"DataCollectionView+IterableMixin","refId":"clean_data/DataCollectionView+IterableMixin"},"isAbstract":true,"kind":"class","name":"TransformedDataCollection","id":"TransformedDataCollection","comment":"\nRepresents a read-only, iterable data collection that is a result of a transformation operation.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_mergeIn","id":"_mergeIn2()","comment":"\nReflects [changes] in the collection w.r.t. [config].\n","children":[{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"param","name":"changes","id":"changes"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"30"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatAddedItem","id":"_treatAddedItem2()","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"42"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatRemovedItem","id":"_treatRemovedItem2()","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"43"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatChangedItem","id":"_treatChangedItem3()","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"param","name":"c","id":"c"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"44"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatItem","id":"_treatItem2()","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"kind":"param","name":"changeSet","id":"changeSet"}],"isPrivate":true,"line":"45"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","line":"47"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"}]},"isFinal":true,"kind":"variable","name":"sources","id":"sources","comment":"\nThe source [DataCollectionView](s) this collection is derived from.\n","line":"15"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"}]},"kind":"variable","name":"_sourcesSubscription","id":"_sourcesSubscription","isPrivate":true,"line":"16"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"}]},"initializedField":{"name":"sources","refId":"clean_data/TransformedDataCollection/sources"},"kind":"param","name":"sources","id":"sources"}],"line":"18"}],"uri":"package:clean_data/src/collections/transformed_collection_view.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ChangeSet","id":"ChangeSet","comment":"\nA representation of a change of map like object.\n","children":[{"returnType":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"method","name":"clone","id":"clone0()","comment":"\nClone changeSet.\n","line":"71"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"markAdded","id":"markAdded1()","comment":"\nMarks [dataObj] as added.\n","children":[{"kind":"param","name":"dataObj","id":"dataObj"}],"line":"78"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"markRemoved","id":"markRemoved1()","comment":"\nMarks [dataObj] as removed.\n","children":[{"kind":"param","name":"dataObj","id":"dataObj"}],"line":"89"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"markChanged","id":"markChanged2()","comment":"\nMarks all the changes in [ChangeSet] or [Change] for a\ngiven [dataObj].\n","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"kind":"param","name":"changeSet","id":"changeSet"}],"line":"101"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"mergeIn","id":"mergeIn1()","comment":"\nMerges two [ChangeSet]s together.\n","children":[{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"param","name":"changeSet","id":"changeSet"}],"line":"112"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"prettify","id":"prettify0()","comment":"\nStrips redundant changedItems from the [ChangeSet].\n","line":"137"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"152"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there are no changes in the [ChangeSet].\n","line":"128"},{"ref":{"name":"Set","refId":"dart.core/Set"},"kind":"variable","name":"addedItems","id":"addedItems","line":"42"},{"ref":{"name":"Set","refId":"dart.core/Set"},"kind":"variable","name":"removedItems","id":"removedItems","line":"43"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"variable","name":"changedItems","id":"changedItems","comment":"\nContains mapping between the changed children and respective changes.\n\nThe changes are represented either by [ChangeSet] object or by [Change].\n","line":"50"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates an empty [ChangeSet].\n","line":"55"},{"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates [ChangeSet] from [other]\n","children":[{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"param","name":"changeSet","id":"changeSet"}],"line":"60"}],"uri":"package:clean_data/src/change_set.dart","line":"40"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Change","id":"Change","comment":"\nA representation of a single change in a scalar value.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"mergeIn","id":"mergeIn1()","comment":"\nApplies another [change] to get representation of whole change.\n","children":[{"ref":{"name":"Change","refId":"clean_data/Change"},"kind":"param","name":"change","id":"change"}],"line":"23"},{"returnType":{"name":"Change","refId":"clean_data/Change"},"kind":"method","name":"clone","id":"clone0()","comment":"\nClones the [change].\n","line":"30"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"34"},{"kind":"variable","name":"oldValue","id":"oldValue","line":"11"},{"kind":"variable","name":"newValue","id":"newValue","line":"12"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates new [Change] from information about the value before change\n[oldValue] and after the change [newValue].\n","children":[{"initializedField":{"name":"oldValue","refId":"clean_data/Change/oldValue"},"kind":"param","name":"oldValue","id":"oldValue"},{"initializedField":{"name":"newValue","refId":"clean_data/Change/newValue"},"kind":"param","name":"newValue","id":"newValue"}],"line":"18"}],"uri":"package:clean_data/src/change_set.dart","line":"10"},{"superclass":{"name":"DataCollectionView+DataChangeListenersMixin","refId":"clean_data/DataCollectionView+DataChangeListenersMixin"},"kind":"class","name":"DataCollection","id":"DataCollection","comment":"\nCollection of [DataView]s.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add2()","comment":"\nAppends the [dataObj] to the collection.\n\nData objects should have unique IDs.\n","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"299"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_removeAll","id":"_removeAll2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"DataView","refId":"clean_data/DataView"}]},"kind":"param","name":"toBeRemoved","id":"toBeRemoved"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"isPrivate":true,"line":"311"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAll","id":"removeAll2()","comment":"\nRemoves multiple data objects from the collection.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"DataView","refId":"clean_data/DataView"}]},"kind":"param","name":"toBeRemoved","id":"toBeRemoved"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"324"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"remove","id":"remove2()","comment":"\nRemoves a data object from the collection.\n","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"332"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"DataView","refId":"clean_data/DataView"}]},"kind":"method","name":"removeBy","id":"removeBy3()","comment":"\nRemoves all objects that have [property] equal to [value] from this collection.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"property","id":"property"},{"kind":"param","name":"value","id":"value"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"339"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere2()","comment":"\nRemoves all objects satisfying filter [test]\n","children":[{"ref":{"name":"DataTestFunction","refId":"clean_data/DataTestFunction"},"kind":"param","name":"test","id":"test"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"351"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear1()","comment":"\nRemoves all data objects from the collection.\n","children":[{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"364"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","line":"370"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates an empty collection.\n","line":"279"},{"returnType":{"name":"DataCollection","refId":"clean_data/DataCollection"},"kind":"constructor","name":"from","id":"from1()","comment":"\nGenerates Collection from [Iterable] of [data].\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"DataView","refId":"clean_data/DataView"}]},"kind":"param","name":"data","id":"data"}],"line":"285"}],"uri":"package:clean_data/src/data_collection.dart","line":"274"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"DataChangeListenersMixin","id":"DataChangeListenersMixin","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_markChanged","id":"_markChanged2()","children":[{"ref":{"name":"T","refId":"clean_data/DataChangeListenersMixin/T"},"kind":"param","name":"key","id":"key"},{"kind":"param","name":"changeSet","id":"changeSet"}],"isPrivate":true,"line":"218"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_notify","id":"_notify1()","children":[{"isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"isPrivate":true,"line":"219"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_onBeforeNotify","id":"_onBeforeNotify0()","comment":"\nRemoves listeners to all objects which have been removed and stacked in [_removedObjects]\n","isPrivate":true,"line":"233"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addOnDataChangeListener","id":"_addOnDataChangeListener2()","comment":"\nStarts listening to changes on [dataObj].\n","children":[{"ref":{"name":"T","refId":"clean_data/DataChangeListenersMixin/T"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"245"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_removeAllOnDataChangeListeners","id":"_removeAllOnDataChangeListeners0()","comment":"\nStops listening to changes on [dataObj]\nSecond possibility is to add to [_removedObjects] and call [_onBeforeNotify]\n","isPrivate":true,"line":"258"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_removeOnDataChangeListener","id":"_removeOnDataChangeListener1()","children":[{"ref":{"name":"T","refId":"clean_data/DataChangeListenersMixin/T"},"kind":"param","name":"key","id":"key"}],"isPrivate":true,"line":"264"},{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"T","refId":"clean_data/DataChangeListenersMixin/T"}]},"kind":"variable","name":"_removedObjects","id":"_removedObjects","comment":"\nInternal Set of data objects removed from Collection that still have DataListener listening.\n","isPrivate":true,"line":"223"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"}]},"isFinal":true,"kind":"variable","name":"_dataListeners","id":"_dataListeners","comment":"\nInternal set of listeners for change events on individual data objects.\n","isPrivate":true,"line":"227"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"package:clean_data/src/data_collection.dart","line":"216"},{"superclass":{"name":"Object+IterableMixin+ChangeNotificationsMixin","refId":"clean_data/Object+IterableMixin+ChangeNotificationsMixin"},"isAbstract":true,"interfaces":[{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"DataView","refId":"clean_data/DataView"}]}],"kind":"class","name":"DataCollectionView","id":"DataCollectionView","comment":"\nObservable collection of data objects that allows for read-only operations.\n\nBy observable we mean that changes to the contents of the collection (data addition / change / removal)\nare propagated to registered listeners.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addIndex","id":"addIndex1()","comment":"\nAdds indices on chosen properties. Indexed properties can be\nused to retrieve data by their value with the [findBy] method,\nor removed by their value with the [removeBy] method.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"kind":"param","name":"indexedProps","id":"indexedProps"}],"line":"42"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_rebuildIndex","id":"_rebuildIndex1()","comment":"\n(Re)indexes all existing data objects into [prop] index.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"prop","id":"prop"}],"isPrivate":true,"line":"63"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_initIndexListener","id":"_initIndexListener0()","comment":"\nStarts listening synchronously on changes to the collection\nand rebuilds the indices accordingly.\n","isPrivate":true,"line":"75"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"DataView","refId":"clean_data/DataView"}]},"kind":"method","name":"findBy","id":"findBy2()","comment":"\nFinds all objects that have [property] equal to [value] in this collection.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"property","id":"property"},{"kind":"param","name":"value","id":"value"}],"line":"107"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true iff this collection contains the given [dataObj].\n\n@param dataObj Data object to be searched for.\n","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"dataObj","id":"dataObj"}],"line":"142"},{"returnType":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"method","name":"where","id":"where1()","comment":"\nFilters the data collection w.r.t. the given filter function [test].\n\nThe collection remains up-to-date w.r.t. to the source collection via\nbackground synchronization.\n","children":[{"ref":{"name":"DataTestFunction","refId":"clean_data/DataTestFunction"},"kind":"param","name":"test","id":"test"}],"line":"150"},{"returnType":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"method","name":"map","id":"map1()","comment":"\nMaps the data collection to a new collection w.r.t. the given [mapping].\n\nThe collection remains up-to-date w.r.t. to the source collection via\nbackground synchronization.\n","children":[{"ref":{"name":"DataTransformFunction","refId":"clean_data/DataTransformFunction"},"kind":"param","name":"mapping","id":"mapping"}],"line":"160"},{"returnType":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"method","name":"union","id":"union1()","comment":"\nUnions the data collection with another [DataCollectionView] to form a new, [UnionedCollectionView].\n\nThe collection remains up-to-date w.r.t. to the source collection via\nbackground synchronization.\n","children":[{"ref":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"param","name":"other","id":"other"}],"line":"170"},{"returnType":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"method","name":"intersection","id":"intersection1()","comment":"\nIntersects the data collection with another [DataCollectionView] to form a new, [IntersectedCollectionView].\n\nThe collection remains up-to-date w.r.t. to the source collection via\nbackground synchronization.\n","children":[{"ref":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"param","name":"other","id":"other"}],"line":"182"},{"returnType":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"method","name":"except","id":"except1()","comment":"\nMinuses the data collection with another [DataCollectionView] to form a new, [ExceptedCollectionView].\n\nThe collection remains up-to-date w.r.t. to the source collection via\nbackground synchronization.\n\n","children":[{"ref":{"name":"DataCollectionView","refId":"clean_data/DataCollectionView"},"kind":"param","name":"other","id":"other"}],"line":"194"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"unattachListeners","id":"unattachListeners0()","line":"199"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","comment":"\nStream all new changes marked in [ChangeSet].\n","line":"207"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"213"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"DataView","refId":"clean_data/DataView"}]},"kind":"property","name":"iterator","id":"iterator","line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"27"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"DataView","refId":"clean_data/DataView"}]},"kind":"property","name":"onBeforeAdd","id":"onBeforeAdd","comment":"\nStream populated with [DataView] events before any\ndata object is added.\n","line":"120"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"DataView","refId":"clean_data/DataView"}]},"kind":"property","name":"onBeforeRemove","id":"onBeforeRemove","comment":"\nStream populated with [DataView] events before any\ndata object is removed.\n","line":"126"},{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"DataView","refId":"clean_data/DataView"}]},"isFinal":true,"kind":"variable","name":"_data","id":"_data","comment":"\nHolds data view objects for the collection.\n","isPrivate":true,"line":"25"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"HashIndex","refId":"clean_data/HashIndex"}]},"isFinal":true,"kind":"variable","name":"_index","id":"_index","comment":"\nThe index on columns that speeds up retrievals and removals by property value.\n","isPrivate":true,"line":"34"},{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"},"kind":"variable","name":"_indexListenerSubscription","id":"_indexListenerSubscription","isPrivate":true,"line":"35"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"DataView","refId":"clean_data/DataView"}]},"isFinal":true,"kind":"variable","name":"_onBeforeAddedController","id":"_onBeforeAddedController","comment":"\nUsed to propagate change events to the outside world.\n","isPrivate":true,"line":"132"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"DataView","refId":"clean_data/DataView"}]},"isFinal":true,"kind":"variable","name":"_onBeforeRemovedController","id":"_onBeforeRemovedController","isPrivate":true,"line":"134"}],"uri":"package:clean_data/src/data_collection.dart","line":"16"},{"kind":"typedef","name":"DataTransformFunction","id":"DataTransformFunction","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"d","id":"d"}],"uri":"package:clean_data/src/data_collection.dart","line":"8"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"typedef","name":"DataTestFunction","id":"DataTestFunction","children":[{"ref":{"name":"DataView","refId":"clean_data/DataView"},"kind":"param","name":"d","id":"d"}],"uri":"package:clean_data/src/data_collection.dart","line":"7"},{"superclass":{"name":"DataView+DataChangeListenersMixin","refId":"clean_data/DataView+DataChangeListenersMixin"},"interfaces":[{"name":"Map","refId":"dart.core/Map"}],"kind":"class","name":"Data","id":"Data","comment":"\nA representation for a single unit of structured data.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add3()","comment":"\nAssigns the [value] to the [key] field.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"210"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll2()","comment":"\nAdds all key-value pairs of [other] to this data.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"other","id":"other"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"217"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\nAssigns the [value] to the [key] field.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"}],"line":"236"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"remove","id":"remove2()","comment":"\nRemoves [key] from the data object.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"key","id":"key"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"244"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAll","id":"removeAll2()","comment":"\nRemove all [keys] from the data object.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"keys","id":"keys"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"251"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear1()","children":[{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"264"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"key","id":"key","uri":"package:clean_data/src/data.dart","line":"268"},{"kind":"param","name":"value","id":"value","uri":"package:clean_data/src/data.dart","line":"268"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"268"},{"kind":"method","name":"putIfAbsent","id":"putIfAbsent2()","children":[{"kind":"param","name":"key","id":"key"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"ifAbsent","id":"ifAbsent","children":[{"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"272"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","line":"278"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates an empty data object.\n","line":"193"},{"returnType":{"name":"Data","refId":"clean_data/Data"},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates a new data object from key-value pairs [data].\n","children":[{"kind":"param","name":"data","id":"data"}],"line":"198"}],"uri":"package:clean_data/src/data.dart","line":"189"},{"superclass":{"name":"Object+ChangeNotificationsMixin","refId":"clean_data/Object+ChangeNotificationsMixin"},"isAbstract":true,"kind":"class","name":"DataView","id":"DataView","children":[{"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the value for the given key or null if key is not in the data object.\nBecause null values are supported, one should use containsKey to\ndistinguish between an absent key and a null value.\n","children":[{"kind":"param","name":"key","id":"key"}],"line":"123"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsKey","id":"containsKey1()","comment":"\nReturns whether this data object contains the given [key].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"key","id":"key"}],"line":"162"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsValue","id":"containsValue1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"166"},{"returnType":{"name":"Map","refId":"dart.core/Map"},"kind":"method","name":"toJson","id":"toJson0()","comment":"\nConverts to Map.\n","line":"172"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns Json representation of the object.\n","line":"177"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","comment":"\nShould release all allocated (referenced) resources as subscribtions.\n","line":"182"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no {key, value} pair in the data object.\n","line":"128"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one {key, value} pair in the data object.\n","line":"135"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"property","name":"keys","id":"keys","comment":"\nThe keys of data object.\n","line":"142"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"property","name":"values","id":"values","comment":"\nThe values of [Data].\n","line":"148"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nThe number of {key, value} pairs in the [Data].\n","line":"155"},{"ref":{"name":"Map","refId":"dart.core/Map"},"isFinal":true,"kind":"variable","name":"_fields","id":"_fields","isPrivate":true,"line":"117"}],"uri":"package:clean_data/src/data.dart","line":"115"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ChangeNotificationsMixin","id":"ChangeNotificationsMixin","children":[{"kind":"method","name":"_clearChanges","id":"_clearChanges0()","isPrivate":true,"line":"61"},{"kind":"method","name":"_clearChangesSync","id":"_clearChangesSync0()","isPrivate":true,"line":"65"},{"kind":"method","name":"_markAdded","id":"_markAdded1()","children":[{"kind":"param","name":"key","id":"key"}],"isPrivate":true,"line":"69"},{"kind":"method","name":"_markRemoved","id":"_markRemoved1()","children":[{"kind":"param","name":"key","id":"key"}],"isPrivate":true,"line":"76"},{"kind":"method","name":"_markChanged","id":"_markChanged2()","children":[{"kind":"param","name":"key","id":"key"},{"kind":"param","name":"change","id":"change"}],"isPrivate":true,"line":"83"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_onBeforeNotify","id":"_onBeforeNotify0()","comment":"\nStreams all new changes marked in [changeSet].\n","isPrivate":true,"line":"93"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_notify","id":"_notify1()","children":[{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"isPrivate":true,"line":"95"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"ChangeSet","refId":"clean_data/ChangeSet"}]},"kind":"property","name":"onChange","id":"onChange","comment":"\nStream populated with [ChangeSet] events whenever the collection or any\nof data object contained gets changed.\n","line":"28"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"Map","refId":"dart.core/Map"}]},"kind":"property","name":"onChangeSync","id":"onChangeSync","comment":"\nStream populated with {'change': [ChangeSet], 'author': [dynamic]} events\nsynchronously at the moment when the collection or any data object contained\ngets changed.\n","line":"35"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[]},"kind":"property","name":"onBeforeAdd","id":"onBeforeAdd","comment":"\nStream populated with [DataView] events before any\ndata object is added.\n","line":"51"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[]},"kind":"property","name":"onBeforeRemove","id":"onBeforeRemove","comment":"\nStream populated with [DataView] events before any\ndata object is removed.\n","line":"57"},{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"variable","name":"_changeSet","id":"_changeSet","comment":"\nHolds pending changes.\n","isPrivate":true,"line":"12"},{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"variable","name":"_changeSetSync","id":"_changeSetSync","isPrivate":true,"line":"13"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"ChangeSet","refId":"clean_data/ChangeSet"}]},"isFinal":true,"kind":"variable","name":"_onChangeController","id":"_onChangeController","comment":"\nControlls notification streams. Used to propagate change events to the outside world.\n","isPrivate":true,"line":"18"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"Map","refId":"dart.core/Map"}]},"isFinal":true,"kind":"variable","name":"_onChangeSyncController","id":"_onChangeSyncController","isPrivate":true,"line":"21"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[]},"isFinal":true,"kind":"variable","name":"_onBeforeAddedController","id":"_onBeforeAddedController","comment":"\nUsed to propagate change events to the outside world.\n","isPrivate":true,"line":"42"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[]},"isFinal":true,"kind":"variable","name":"_onBeforeRemovedController","id":"_onBeforeRemovedController","isPrivate":true,"line":"44"}],"uri":"package:clean_data/src/data.dart","line":"8"}],"uri":"package:clean_data/clean_data.dart","line":"88"}